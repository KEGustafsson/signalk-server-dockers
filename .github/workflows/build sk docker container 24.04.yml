name: SignalK Docker Build - Based 24.04 - Semantic Versions

on:
  workflow_dispatch:

jobs:
  react-jsonschema-form-bs4:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      - name: react-jsonschema-form-bs4
        run: |
          git clone https://github.com/KEGustafsson/react-jsonschema-form-bs4.git
          cd react-jsonschema-form-bs4
          rm -f package-lock.json
          npm i
          npm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: react-jsonschema-form-bs4
          path: |
            ./react-jsonschema-form-bs4/*.tgz

  specification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      - name: specification
        run: |
          git clone https://github.com/SignalK/specification.git
          cd specification
          npm i
          npm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: specification
          path: |
            ./specification/*.tgz

  nmea0183-signalk:
    runs-on: ubuntu-latest
    needs: [specification]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      - uses: actions/download-artifact@v4
        with:
          name: specification
      - name: nmea0183-signalk
        run: |
          git clone https://github.com/SignalK/nmea0183-signalk.git
          cd nmea0183-signalk
          mv ../*.tgz .
          npm i --save *.tgz
          rm -rf node_modules
          rm -f package-lock.json
          rm -f *.tgz
          npm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: nmea0183-signalk
          path: |
            ./nmea0183-signalk/*.tgz

  signalk-server:
    runs-on: ubuntu-latest
    needs: [nmea0183-signalk, react-jsonschema-form-bs4]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      - name: signalk-server download and patch
        id: git
        run: |
          git clone https://github.com/SignalK/signalk-server.git
          cd signalk-server
          git fetch --tags
          tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Extracted tag: $tag"
          if [ -d "./../patch" ] && [ "$(ls -A ./../patch/*.patch 2>/dev/null)" ]; then
            git apply ./../patch/*.patch
          else
            echo "No patches to apply"
          fi
      - uses: actions/download-artifact@v4
        with:
          name: react-jsonschema-form-bs4
      - name: server-admin-ui patch 
        run: |
          cd signalk-server/packages/server-admin-ui
          mv ./../../../*.tgz .
          npm i --save-dev *.tgz
          rm -rf node_modules
          rm -f package-lock.json
      - uses: actions/download-artifact@v4
        with:
          name: nmea0183-signalk
      - uses: actions/download-artifact@v4
        with:
          name: specification
      - name: signalk-server build
        run: |
          cd signalk-server
          mv ./../*.tgz .
          rm -f package-lock.json
          rm -rf node_modules
          npm install --package-lock-only
          npm ci && npm cache clean --force
          npm run build --workspaces --if-present
          cd packages/server-admin-ui
          rm -f *.tgz
          npm pack && mv *.tgz ../../
          cd ../server-api
          npm pack && mv *.tgz ../../
          cd ../streams
          npm pack && mv *.tgz ../../
          cd ../..
          jq '.workspaces=[]' package.json > _package.json && mv _package.json package.json
          npm i --save *.tgz
          npm run build
          npm pack
      - name: Save tag to artifact
        run: echo ${{ steps.git.outputs.tag }} > tag.txt
      - name: Upload tag
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: tag
          path: tag.txt
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: packed-modules
          path: ./signalk-server/*.tgz

  build_docker_tags:
    runs-on: ubuntu-latest
    needs: [signalk-server]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: tag
      - name: Set TAG for build-args
        id: vars
        run: |
          tag=$(cat tag.txt)
          echo "Extracted tag: $tag"
          echo "TAG=$tag" >> $GITHUB_OUTPUT
          IFS='.' read -r MAJOR MINOR PATCH <<< "$tag"
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MAJOR.$MINOR" >> $GITHUB_OUTPUT
          echo "ghcr=ghcr.io/kegustafsson/signalk-server" >> $GITHUB_OUTPUT
          echo "hub=kgustafs/signalk-server" >> $GITHUB_OUTPUT
      - name: Set tags
        id: set-tags
        run: |
          if [[ "${{ steps.vars.outputs.tag }}" == *beta* ]]; then
            tags="${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.TAG }}"
            tags="$tags -t ${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.TAG }}"
          else
            tags="${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.TAG }}"
            tags="$tags -t ${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.MAJOR }}"
            tags="$tags -t ${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.MINOR }}"
            tags="$tags -t ${{ steps.vars.outputs.ghcr }}:latest-24.04"
            tags="$tags -t ${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.TAG }}"
            tags="$tags -t ${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.MAJOR }}"
            tags="$tags -t ${{ steps.vars.outputs.hub }}:latest-24.04"
          fi
          echo "tags=$tags" >> $GITHUB_OUTPUT
      - name: Save docker tags to artifact
        run: echo ${{ steps.set-tags.outputs.tags }} > docker_tags.txt
      - name: Upload tag
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: docker_tags
          path: docker_tags.txt

  build_docker_image_arm64:
    runs-on: ubuntu-24.04-arm
    needs: [build_docker_tags]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packed-modules
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile_24.04
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/kegustafsson/signalk-server:arm64-24.04
            kgustafs/signalk-server:arm64-24.04

  build_docker_image_armv7:
    runs-on: ubuntu-24.04-arm
    needs: [build_docker_tags]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packed-modules
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile_24.04
          platforms: linux/arm/v7
          push: true
          tags: |
            ghcr.io/kegustafsson/signalk-server:armv7-24.04
            kgustafs/signalk-server:armv7-24.04

  build_docker_image_amd64:
    runs-on: ubuntu-latest
    needs: [build_docker_tags]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packed-modules
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile_24.04
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/kegustafsson/signalk-server:amd64-24.04
            kgustafs/signalk-server:amd64-24.04

  create-and-push-manifest:
    needs: [build_docker_image_arm64, build_docker_image_armv7, build_docker_image_amd64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: actions/download-artifact@v4
        with:
          name: docker_tags
      - name: Set docker tags
        id: set-tags
        run: |
          tags=$(cat docker_tags.txt)
          echo "tags=$tags" >> $GITHUB_OUTPUT
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Create and push multi-arch manifest to GHCR and Docker Hub
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            ${{ steps.set-tags.outputs.tags }}
          sources: |
            ghcr.io/kegustafsson/signalk-server:amd64-24.04
            ghcr.io/kegustafsson/signalk-server:arm64-24.04
            ghcr.io/kegustafsson/signalk-server:armv7-24.04
            kgustafs/signalk-server:amd64-24.04			
            kgustafs/signalk-server:arm64-24.04
            kgustafs/signalk-server:armv7-24.04

  housekeeping:
    needs: create-and-push-manifest
    runs-on: ubuntu-latest    
    steps:	
      - name: Delete Docker Hub Tag
        env:
          IMAGE_NAME: "kgustafs/signalk-server"
          TAG1: "amd64-24.04"
          TAG2: "arm64-24.04"
          TAG3: "armv7-24.04"
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/$TAG1/"
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/$TAG2/"
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/$TAG3/"
            
      - name: Remove Docker Image from GHCR
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          packages: signalk-server
          delete-untagged: true
          delete-tags: amd64-24.04,arm64-24.04,armv7-24.04
          token: ${{ secrets.GHCR_TOKEN_NEW }}

  slack:
    runs-on: ubuntu-latest
    needs: housekeeping
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tag
      - name: Set TAG for build-args
        id: vars
        run: |
          tag=$(cat tag.txt)
          echo "Extracted tag: $tag"
          echo "TAG=$tag" >> $GITHUB_OUTPUT
      - name: Slack notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"New Signal K image available, ${{ steps.vars.outputs.TAG }}"}' https://hooks.slack.com/services/${{ secrets.SLACK }}
