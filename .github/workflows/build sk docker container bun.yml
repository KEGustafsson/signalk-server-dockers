name: SignalK Docker Build bun

on:
  workflow_dispatch:

jobs:
  react-jsonschema-form-bs4:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Bun setup
        uses: oven-sh/setup-bun@v2
      - name: react-jsonschema-form-bs4
        run: |
          git clone -b bun https://github.com/KEGustafsson/react-jsonschema-form-bs4.git
          cd react-jsonschema-form-bs4
          rm -f package-lock.json
          bun i
          bun pm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: react-jsonschema-form-bs4
          path: |
            ./react-jsonschema-form-bs4/*.tgz

  specification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Bun setup
        uses: oven-sh/setup-bun@v2
      - name: specification
        run: |
          git clone https://github.com/SignalK/specification.git
          cd specification
          bun i
          bun pm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: specification
          path: |
            ./specification/*.tgz

  nmea0183-signalk:
    needs: [specification]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Bun setup
        uses: oven-sh/setup-bun@v2
      - uses: actions/download-artifact@v5
        with:
          name: specification
      - name: nmea0183-signalk
        run: |
          git clone https://github.com/SignalK/nmea0183-signalk.git
          cd nmea0183-signalk
          mv ../*.tgz .
          bun remove @signalk/signalk-schema
          bun i --save *.tgz
          rm -rf node_modules
          rm -f *.tgz
          bun pm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: nmea0183-signalk
          path: |
            ./nmea0183-signalk/*.tgz

  signalk-server:
    needs: [nmea0183-signalk, react-jsonschema-form-bs4]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node setup
        uses: actions/setup-node@v6
        with:
          node-version: '24.x'
      - name: Bun setup
        uses: oven-sh/setup-bun@v2
      - name: signalk-server download and patch
        id: git
        run: |
          git clone https://github.com/SignalK/signalk-server.git
          # git clone -b test https://github.com/KEGustafsson/signalk-server.git
          cd signalk-server
          git fetch --tags
          tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Extracted tag: $tag"
          if [ -d "./../patch" ] && [ "$(ls -A ./../patch/*.patch 2>/dev/null)" ]; then
            git apply ./../patch/*.patch
          else
            echo "No patches to apply"
          fi
      - uses: actions/download-artifact@v5
        with:
          name: react-jsonschema-form-bs4
      - name: server-admin-ui patch 
        run: |
          cd signalk-server/packages/server-admin-ui
          mv ./../../../*.tgz .
          npm i --save-dev *.tgz
          rm -rf node_modules
          rm -f package-lock.json
      - uses: actions/download-artifact@v5
        with:
          name: nmea0183-signalk
      - uses: actions/download-artifact@v5
        with:
          name: specification
      - name: signalk-server build
        run: |
          cd signalk-server
          mv ./../*.tgz .
          rm -f package-lock.json
          rm -rf node_modules
          npm cache clean -f
          npm install --package-lock-only
          npm ci && npm cache clean --force
          npm run build --workspaces --if-present
          bun x tsc --build
          bun x typedoc
          npm pack --workspaces
          rm signalk-typedoc-signalk-theme*.tgz # This is only needed as a dev dependency
          bun pm pack
      - name: Save tag to artifact
        run: echo ${{ steps.git.outputs.tag }} > tag.txt
      - name: Upload tag
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: tag
          path: tag.txt
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: packed-modules
          path: ./signalk-server/*.tgz

  build_docker_tags:
    needs: [signalk-server]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [24.04]
        node: [22.x, 24.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        with:
          name: tag
      - name: Set TAG for build-args
        id: vars
        run: |
          tag=$(cat tag.txt)
          echo "Extracted tag: $tag"
          echo "TAG=$tag" >> $GITHUB_OUTPUT
          IFS='.' read -r MAJOR MINOR PATCH <<< "$tag"
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MAJOR.$MINOR" >> $GITHUB_OUTPUT
          echo "ghcr=ghcr.io/kegustafsson/signalk-server" >> $GITHUB_OUTPUT
          echo "hub=kgustafs/signalk-server" >> $GITHUB_OUTPUT
      - name: Set tags
        id: set-tags
        run: |
          if [[ "${{ steps.vars.outputs.tag }}" == *beta* ]]; then
            tags="${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.TAG }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:latest-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.TAG }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:latest-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.TAG }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:latest-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.TAG }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:latest-${{ matrix.node }}"
          else
            tags="${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.TAG }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.MAJOR }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.MINOR }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:latest-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.TAG }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.MAJOR }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.MINOR }}-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:latest-${{ matrix.os }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.TAG }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.MAJOR }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:${{ steps.vars.outputs.MINOR }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.ghcr }}:latest-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.TAG }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.MAJOR }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:${{ steps.vars.outputs.MINOR }}-${{ matrix.node }}"
            tags="$tags,${{ steps.vars.outputs.hub }}:latest-${{ matrix.node }}"
          fi
          echo "tags=$tags" >> $GITHUB_OUTPUT
      - name: Save docker tags to artifact
        run: echo ${{ steps.set-tags.outputs.tags }} > docker_tags_${{ matrix.os }}_${{ matrix.node }}.txt
      - name: Upload tag
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: docker_tags_${{ matrix.os }}_${{ matrix.node }}
          path: docker_tags_${{ matrix.os }}_${{ matrix.node }}.txt

  build-images:
    needs: [signalk-server]
    strategy:
      matrix:
        os: [24.04]
        node: [22.x, 24.x]
        vm: [ubuntu-latest, ubuntu-24.04-arm]
        include:
          - vm: ubuntu-latest
            arch: amd
            platform: linux/amd64
          - vm: ubuntu-24.04-arm
            arch: arm
            node: 22.x
            platform: linux/arm64,linux/arm/v7
          - vm: ubuntu-24.04-arm
            arch: arm
            node: 24.x
            platform: linux/arm64
    runs-on: ${{ matrix.vm }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        with:
          name: packed-modules
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ghcr.io/kegustafsson/signalk-server:${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.node }}-${{ github.run_id }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.os }}-${{ matrix.node }}

  create-and-push-manifest:
    needs: [build_docker_tags, build-images]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [24.04]
        node: [22.x, 24.x]
        include:
          - os: 24.04
            node: 24.x
            tag: latest
          - os: 24.04
            node: 22.x
            tag: latest-22.x
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: actions/download-artifact@v5
        with:
          name: docker_tags_${{ matrix.os }}_${{ matrix.node }}
      - name: Set multi-line output
        id: set_images
        run: |
          tags=$(cat docker_tags_${{ matrix.os }}_${{ matrix.node }}.txt | sed 's/,/\n/g')
          {
            echo 'IMAGES<<EOF'
            printf "%s\n" "$tags"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
      - name: Print tags
        run: |
          tags=$(cat docker_tags_${{ matrix.os }}_${{ matrix.node }}.txt | sed 's/,/\n/g')
          echo "tags: $tags"
          echo "tags: ${{ steps.set_images.outputs.IMAGES }}"      
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Create and push multi-arch manifest to GHCR and Docker Hub
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            ${{ steps.set_images.outputs.IMAGES }}
            ghcr.io/kegustafsson/signalk-server:${{ matrix.tag }}
            kgustafs/signalk-server:${{ matrix.tag }}
          sources: |
            ghcr.io/kegustafsson/signalk-server:amd-${{ matrix.os }}-${{ matrix.node }}-${{ github.run_id }}
            ghcr.io/kegustafsson/signalk-server:arm-${{ matrix.os }}-${{ matrix.node }}-${{ github.run_id }}

  housekeeping:
    needs: create-and-push-manifest
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Remove Docker Image from GHCR
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          packages: signalk-server
          delete-untagged: true
          delete-tags: amd-24.04-24.x-${{ github.run_id }},amd-24.04-22.x-${{ github.run_id }},arm-24.04-24.x-${{ github.run_id }},arm-24.04-22.x-${{ github.run_id }}
          token: ${{ secrets.GHCR_TOKEN_NEW }}

  slack:
    runs-on: ubuntu-latest
    needs: housekeeping
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: tag
      - name: Set TAG for build-args
        id: vars
        run: |
          tag=$(cat tag.txt)
          echo "Extracted tag: $tag"
          echo "TAG=$tag" >> $GITHUB_OUTPUT
      - name: Slack notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Manually triggered image ready, ${{ steps.vars.outputs.TAG }} with Node 22.x & 24.x"}' https://hooks.slack.com/services/${{ secrets.SLACK }}
