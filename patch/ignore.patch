From 5c1ebc674fea827d20a6caaadef051c775a3f251 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Wed, 28 May 2025 13:12:56 -0400
Subject: [PATCH 1/8] fix: ignore static self data

---
 src/index.ts | 57 +++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 54 insertions(+), 3 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index 50993ec37..6ac11cd64 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -315,11 +315,13 @@ class Server {
         if (data.updates.length < 1) return
 
         try {
-          const preferredDelta = toPreferredDelta(data, now, app.selfContext)
+          let delta = filterStaticSelfData(data, app.selfContext)
+          delta = toPreferredDelta(delta, now, app.selfContext)
+
           if (skVersion == SKVersion.v1) {
-            deltachainV1.process(preferredDelta)
+            deltachainV1.process(delta)
           } else {
-            deltachainV2.process(preferredDelta)
+            deltachainV2.process(delta)
           }
         } catch (err) {
           console.error(err)
@@ -673,3 +675,52 @@ async function startInterfaces(
     })
   )
 }
+
+function filterStaticSelfData(delta: any, selfContext: string) {
+  if (delta.context === selfContext) {
+    delta.updates &&
+      delta.updates.forEach((update: any) => {
+        if ('values' in update) {
+          update.values = update.values.reduce((acc: any, pathValue: any) => {
+            const nvp = filterSelfDataKP(pathValue)
+            if (nvp) {
+              acc.push(nvp)
+            }
+            return acc
+          }, [])
+          if (update.values.length == 0) {
+            delete update.values
+          }
+        }
+      })
+  }
+  return delta
+}
+
+function filterSelfDataKP(pathValue: any) {
+  const emptyKeys = ['name', 'mmsi']
+
+  const filteredPaths = [
+    'design.aisShipType',
+    'design.beam',
+    'design.length',
+    'design.draft',
+    'sensors.gps.fromBow',
+    'sensors.gps.fromCenter'
+  ]
+
+  if (pathValue.path === '') {
+    if (Object.keys(pathValue.value).some((k) => emptyKeys.includes(k))) {
+      const value = pathValue.value
+      pathValue.value = {}
+      Object.keys(value).forEach((k) => {
+        if (!emptyKeys.includes(k)) {
+          pathValue.value[k] = value[k]
+        }
+      })
+    }
+  } else if (filteredPaths.includes(pathValue.path)) {
+    return null
+  }
+  return pathValue
+}

From 462c6edfe72c70ab6df51045fdd18a18dded8831 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Wed, 28 May 2025 13:36:03 -0400
Subject: [PATCH 2/8] fix: allow messages from defaults through

---
 src/index.ts       | 2 +-
 test/deltacache.js | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/index.ts b/src/index.ts
index 6ac11cd64..90cf6004c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -680,7 +680,7 @@ function filterStaticSelfData(delta: any, selfContext: string) {
   if (delta.context === selfContext) {
     delta.updates &&
       delta.updates.forEach((update: any) => {
-        if ('values' in update) {
+        if ('values' in update && update['$source'] !== 'defaults') {
           update.values = update.values.reduce((acc: any, pathValue: any) => {
             const nvp = filterSelfDataKP(pathValue)
             if (nvp) {
diff --git a/test/deltacache.js b/test/deltacache.js
index abfe21978..358df64b0 100644
--- a/test/deltacache.js
+++ b/test/deltacache.js
@@ -46,6 +46,7 @@ const testDelta = {
     },
     {
       timestamp: '2014-05-03T09:14:11.096Z',
+      $source: 'defaults',
       values: [
         {
           path: '',

From 89aed7ab5cfcfe96ef9f290b57a9567e13d449d4 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 30 May 2025 12:56:06 -0400
Subject: [PATCH 3/8] fix: ignore communication.callsignVhf

---
 src/index.ts | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index 90cf6004c..d9f5e031c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -698,9 +698,12 @@ function filterStaticSelfData(delta: any, selfContext: string) {
 }
 
 function filterSelfDataKP(pathValue: any) {
-  const emptyKeys = ['name', 'mmsi']
+  const deepKeys: { [key: string]: string[] } = {
+    '': ['name', 'mmsi'],
+    communication: ['callsignVhf']
+  }
 
-  const filteredPaths = [
+  const filteredPaths: string[] = [
     'design.aisShipType',
     'design.beam',
     'design.length',
@@ -709,15 +712,20 @@ function filterSelfDataKP(pathValue: any) {
     'sensors.gps.fromCenter'
   ]
 
-  if (pathValue.path === '') {
-    if (Object.keys(pathValue.value).some((k) => emptyKeys.includes(k))) {
+  const deep = deepKeys[pathValue.path]
+
+  if (deep !== undefined) {
+    if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
       const value = pathValue.value
       pathValue.value = {}
       Object.keys(value).forEach((k) => {
-        if (!emptyKeys.includes(k)) {
+        if (!deep.includes(k)) {
           pathValue.value[k] = value[k]
         }
       })
+      if (Object.keys(pathValue.value).length == 0) {
+        return null
+      }
     }
   } else if (filteredPaths.includes(pathValue.path)) {
     return null

From 40d9a438f0249b01d1dde2c366deef6ae1b80227 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 10:00:11 -0400
Subject: [PATCH 4/8] fix: filter out communication.callsignVhf

---
 src/index.ts | 25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index d9f5e031c..b3c01a5d7 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -699,8 +699,8 @@ function filterStaticSelfData(delta: any, selfContext: string) {
 
 function filterSelfDataKP(pathValue: any) {
   const deepKeys: { [key: string]: string[] } = {
-    '': ['name', 'mmsi'],
-    communication: ['callsignVhf']
+    '': ['name', 'mmsi', 'communication'],
+    //communication: ['callsignVhf']
   }
 
   const filteredPaths: string[] = [
@@ -714,15 +714,22 @@ function filterSelfDataKP(pathValue: any) {
 
   const deep = deepKeys[pathValue.path]
 
+  const filterValues = (obj: any, items: string[]) => {
+    const res: {[key:string]: any} = {}
+    Object.keys(obj).forEach((k) => {
+      if (!items.includes(k)) {
+        res[k] = obj.value[k]
+      } 
+    })
+    return res
+  }
+
   if (deep !== undefined) {
     if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
-      const value = pathValue.value
-      pathValue.value = {}
-      Object.keys(value).forEach((k) => {
-        if (!deep.includes(k)) {
-          pathValue.value[k] = value[k]
-        }
-      })
+      pathValue.value = filterValues(pathValue.value, deep)
+      if ( pathValue.path === '' && pathValue.value.communication !== undefined ) {
+        pathValue.value.communication = filterValues(pathValue.value.communication, ['callsignVhf'])
+      }
       if (Object.keys(pathValue.value).length == 0) {
         return null
       }

From 9e9790efe4ef6a353a458a42069727ec6d3384e6 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 11:03:22 -0400
Subject: [PATCH 5/8] fix: formatting

---
 src/index.ts | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index b3c01a5d7..b0f291bc6 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -699,7 +699,7 @@ function filterStaticSelfData(delta: any, selfContext: string) {
 
 function filterSelfDataKP(pathValue: any) {
   const deepKeys: { [key: string]: string[] } = {
-    '': ['name', 'mmsi', 'communication'],
+    '': ['name', 'mmsi', 'communication']
     //communication: ['callsignVhf']
   }
 
@@ -715,11 +715,11 @@ function filterSelfDataKP(pathValue: any) {
   const deep = deepKeys[pathValue.path]
 
   const filterValues = (obj: any, items: string[]) => {
-    const res: {[key:string]: any} = {}
+    const res: { [key: string]: any } = {}
     Object.keys(obj).forEach((k) => {
       if (!items.includes(k)) {
         res[k] = obj.value[k]
-      } 
+      }
     })
     return res
   }
@@ -727,8 +727,14 @@ function filterSelfDataKP(pathValue: any) {
   if (deep !== undefined) {
     if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
       pathValue.value = filterValues(pathValue.value, deep)
-      if ( pathValue.path === '' && pathValue.value.communication !== undefined ) {
-        pathValue.value.communication = filterValues(pathValue.value.communication, ['callsignVhf'])
+      if (
+        pathValue.path === '' &&
+        pathValue.value.communication !== undefined
+      ) {
+        pathValue.value.communication = filterValues(
+          pathValue.value.communication,
+          ['callsignVhf']
+        )
       }
       if (Object.keys(pathValue.value).length == 0) {
         return null

From f92216a68c39c12ed55cb9fbf4264b3b8cb998c4 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 12:16:04 -0400
Subject: [PATCH 6/8] add tests

---
 test/staticData.js | 148 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 148 insertions(+)
 create mode 100644 test/staticData.js

diff --git a/test/staticData.js b/test/staticData.js
new file mode 100644
index 000000000..7990a43fe
--- /dev/null
+++ b/test/staticData.js
@@ -0,0 +1,148 @@
+const chai = require('chai')
+chai.Should()
+chai.use(require('chai-things'))
+chai.use(require('@signalk/signalk-schema').chaiModule)
+const _ = require('lodash')
+import { startServer } from './ts-servertestutilities'
+
+const testDelta = {
+  updates: [
+    {
+      values: [
+        {
+          path: '',
+          value: {
+            name: 'TestBoat',
+            mmsi: '230083471',
+            flag: 'NZ',
+            communication: {
+              callsignVhf: 'XYZ',
+              phoneNumber: '8675309'
+            }
+          }
+        },
+        {
+          path: 'design.draft',
+          value: 20
+        },
+        {
+          path: 'design.aisShipType',
+          value: {
+            "name": "Sailing",
+            "id": 36
+          }
+        },
+        {
+          path: 'design.beam',
+          value: 10
+        },
+        {
+          path: 'design.length',
+          value: {
+            "overall":9
+          }
+        },
+        {
+          path: 'sensors.gps.fromBow',
+          value: 2
+        },
+        {
+          path: 'sensors.gps.fromCenter',
+          value: 5
+        },
+        {
+          path: 'design.displacement',
+          value: 1
+        },
+      ]
+    }
+  ]
+}
+
+describe('Static Data', () => {
+  let doStop, theServer, doSendADelta
+
+  before(() =>
+    startServer().then((s) => {
+      const { sendADelta, stop, server } = s
+      doStop = stop
+      theServer = server
+      doSendADelta = sendADelta
+    })
+  )
+
+  after(() => doStop())
+
+  it('handles self static updates', async function () {
+    const delta = JSON.parse(JSON.stringify(testDelta))
+    delta.context = 'vessels.self'
+    await doSendADelta(delta)
+    
+    const fullTree = theServer.app.deltaCache.buildFull(null, [])
+
+    const vessel = _.get(fullTree, fullTree.self)
+
+    vessel.should.have.property('flag', 'NZ')
+    vessel.should.have.nested.property('design.displacement.value', 1)
+    vessel.should.have.nested.property('communication.phoneNumber', '8675309')
+    
+    vessel.should.not.have.property('mmsi')
+    vessel.should.not.have.property('name')
+    vessel.should.not.have.nested.property('design.draft')
+    vessel.should.not.have.nested.property('design.aisShipType')
+    vessel.should.not.have.nested.property('design.beam')
+    vessel.should.not.have.nested.property('design.length')
+    vessel.should.not.have.nested.property('sensors.gps.fromBow')
+    vessel.should.not.have.nested.property('sensors.gps.fromCenter')
+    vessel.should.not.have.nested.property('communication.callsignVhf')
+  })
+  
+  it('handles others static updates', async function () {
+    const delta = JSON.parse(JSON.stringify(testDelta))
+    delta.context = 'vessels.123456789'
+    await doSendADelta(delta)
+    
+    const fullTree = theServer.app.deltaCache.buildFull(null, [])
+
+    const self = _.get(fullTree, delta.context)
+
+    self.should.have.property('flag', 'NZ')
+    self.should.have.nested.property('design.displacement.value', 1)
+    self.should.have.nested.property('communication.phoneNumber', '8675309')
+    
+    self.should.have.property('mmsi', '230083471')
+    self.should.have.property('name', 'TestBoat')
+    self.should.have.nested.property('design.draft')
+    self.should.have.nested.property('design.aisShipType')
+    self.should.have.nested.property('design.beam')
+    self.should.have.nested.property('design.length')
+    self.should.have.nested.property('sensors.gps.fromBow')
+    self.should.have.nested.property('sensors.gps.fromCenter')
+    self.should.have.nested.property('communication.callsignVhf')
+  })
+  
+  it('allows static updates from defaults', async function () {
+    const delta = JSON.parse(JSON.stringify(testDelta))
+    delta.context = 'vessels.self'
+    delta.updates[0]['$source'] = 'defaults'
+    await doSendADelta(delta)
+    
+    const fullTree = theServer.app.deltaCache.buildFull(null, [])
+
+    const self = _.get(fullTree, fullTree.self)
+
+    self.should.have.property('flag', 'NZ')
+    self.should.have.nested.property('design.displacement.value', 1)
+    self.should.have.nested.property('communication.phoneNumber', '8675309')
+    
+    self.should.have.property('mmsi', '230083471')
+    self.should.have.property('name', 'TestBoat')
+    self.should.have.nested.property('design.draft')
+    self.should.have.nested.property('design.aisShipType')
+    self.should.have.nested.property('design.beam')
+    self.should.have.nested.property('design.length')
+    self.should.have.nested.property('sensors.gps.fromBow')
+    self.should.have.nested.property('sensors.gps.fromCenter')
+    self.should.have.nested.property('communication.callsignVhf')
+   })
+})

From f2e34d48f197567189688ac6cf0738d410717229 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 12:16:21 -0400
Subject: [PATCH 7/8] fix: issues exposed from tests

---
 src/index.ts | 27 +++++++++++++--------------
 1 file changed, 13 insertions(+), 14 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index b0f291bc6..6b4e967db 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -699,8 +699,7 @@ function filterStaticSelfData(delta: any, selfContext: string) {
 
 function filterSelfDataKP(pathValue: any) {
   const deepKeys: { [key: string]: string[] } = {
-    '': ['name', 'mmsi', 'communication']
-    //communication: ['callsignVhf']
+    '': ['name', 'mmsi']
   }
 
   const filteredPaths: string[] = [
@@ -718,7 +717,7 @@ function filterSelfDataKP(pathValue: any) {
     const res: { [key: string]: any } = {}
     Object.keys(obj).forEach((k) => {
       if (!items.includes(k)) {
-        res[k] = obj.value[k]
+        res[k] = obj[k]
       }
     })
     return res
@@ -727,18 +726,18 @@ function filterSelfDataKP(pathValue: any) {
   if (deep !== undefined) {
     if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
       pathValue.value = filterValues(pathValue.value, deep)
-      if (
-        pathValue.path === '' &&
+    }
+    if (
+      pathValue.path === '' &&
         pathValue.value.communication !== undefined
-      ) {
-        pathValue.value.communication = filterValues(
-          pathValue.value.communication,
-          ['callsignVhf']
-        )
-      }
-      if (Object.keys(pathValue.value).length == 0) {
-        return null
-      }
+    ) {
+      pathValue.value.communication = filterValues(
+        pathValue.value.communication,
+        ['callsignVhf']
+      )
+    }
+    if (Object.keys(pathValue.value).length == 0) {
+      return null
     }
   } else if (filteredPaths.includes(pathValue.path)) {
     return null

From d478a6e05474f406659d0ef78cacc55fd7094485 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 12:17:10 -0400
Subject: [PATCH 8/8] fix: formatting

---
 src/index.ts       |  5 +----
 test/staticData.js | 26 +++++++++++++-------------
 2 files changed, 14 insertions(+), 17 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index 6b4e967db..23580ed7c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -727,10 +727,7 @@ function filterSelfDataKP(pathValue: any) {
     if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
       pathValue.value = filterValues(pathValue.value, deep)
     }
-    if (
-      pathValue.path === '' &&
-        pathValue.value.communication !== undefined
-    ) {
+    if (pathValue.path === '' && pathValue.value.communication !== undefined) {
       pathValue.value.communication = filterValues(
         pathValue.value.communication,
         ['callsignVhf']
diff --git a/test/staticData.js b/test/staticData.js
index 7990a43fe..621f1506f 100644
--- a/test/staticData.js
+++ b/test/staticData.js
@@ -28,8 +28,8 @@ const testDelta = {
         {
           path: 'design.aisShipType',
           value: {
-            "name": "Sailing",
-            "id": 36
+            name: 'Sailing',
+            id: 36
           }
         },
         {
@@ -39,7 +39,7 @@ const testDelta = {
         {
           path: 'design.length',
           value: {
-            "overall":9
+            overall: 9
           }
         },
         {
@@ -53,7 +53,7 @@ const testDelta = {
         {
           path: 'design.displacement',
           value: 1
-        },
+        }
       ]
     }
   ]
@@ -77,7 +77,7 @@ describe('Static Data', () => {
     const delta = JSON.parse(JSON.stringify(testDelta))
     delta.context = 'vessels.self'
     await doSendADelta(delta)
-    
+
     const fullTree = theServer.app.deltaCache.buildFull(null, [])
 
     const vessel = _.get(fullTree, fullTree.self)
@@ -85,7 +85,7 @@ describe('Static Data', () => {
     vessel.should.have.property('flag', 'NZ')
     vessel.should.have.nested.property('design.displacement.value', 1)
     vessel.should.have.nested.property('communication.phoneNumber', '8675309')
-    
+
     vessel.should.not.have.property('mmsi')
     vessel.should.not.have.property('name')
     vessel.should.not.have.nested.property('design.draft')
@@ -96,12 +96,12 @@ describe('Static Data', () => {
     vessel.should.not.have.nested.property('sensors.gps.fromCenter')
     vessel.should.not.have.nested.property('communication.callsignVhf')
   })
-  
+
   it('handles others static updates', async function () {
     const delta = JSON.parse(JSON.stringify(testDelta))
     delta.context = 'vessels.123456789'
     await doSendADelta(delta)
-    
+
     const fullTree = theServer.app.deltaCache.buildFull(null, [])
 
     const self = _.get(fullTree, delta.context)
@@ -109,7 +109,7 @@ describe('Static Data', () => {
     self.should.have.property('flag', 'NZ')
     self.should.have.nested.property('design.displacement.value', 1)
     self.should.have.nested.property('communication.phoneNumber', '8675309')
-    
+
     self.should.have.property('mmsi', '230083471')
     self.should.have.property('name', 'TestBoat')
     self.should.have.nested.property('design.draft')
@@ -120,13 +120,13 @@ describe('Static Data', () => {
     self.should.have.nested.property('sensors.gps.fromCenter')
     self.should.have.nested.property('communication.callsignVhf')
   })
-  
+
   it('allows static updates from defaults', async function () {
     const delta = JSON.parse(JSON.stringify(testDelta))
     delta.context = 'vessels.self'
     delta.updates[0]['$source'] = 'defaults'
     await doSendADelta(delta)
-    
+
     const fullTree = theServer.app.deltaCache.buildFull(null, [])
 
     const self = _.get(fullTree, fullTree.self)
@@ -134,7 +134,7 @@ describe('Static Data', () => {
     self.should.have.property('flag', 'NZ')
     self.should.have.nested.property('design.displacement.value', 1)
     self.should.have.nested.property('communication.phoneNumber', '8675309')
-    
+
     self.should.have.property('mmsi', '230083471')
     self.should.have.property('name', 'TestBoat')
     self.should.have.nested.property('design.draft')
@@ -144,5 +144,5 @@ describe('Static Data', () => {
     self.should.have.nested.property('sensors.gps.fromBow')
     self.should.have.nested.property('sensors.gps.fromCenter')
     self.should.have.nested.property('communication.callsignVhf')
-   })
+  })
 })
