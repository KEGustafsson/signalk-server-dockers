diff --git a/src/baseDeltaFilter.ts b/src/baseDeltaFilter.ts
new file mode 100644
index 00000000..8d467c31
--- /dev/null
+++ b/src/baseDeltaFilter.ts
@@ -0,0 +1,204 @@
+export interface UpdateValue {
+  path: string;
+  value: any;
+}
+
+export interface Update {
+  values?: UpdateValue[];
+  [key: string]: any;
+}
+
+export function filterUpdates(update: Update | any[], pathToRemove: UpdateValue[]): Update | any[] {
+  if (Array.isArray(update)) {
+    return update.map(item => filterUpdates(item, pathToRemove));
+  }
+
+  if (update.values && Array.isArray(update.values)) {
+    const consolidated = consolidateRootPaths(update.values);
+    const filteredValues = consolidated.filter(updateValue => {
+      return !pathToRemove.some(removeItem => {
+        if (updateValue.path === '' && removeItem.path === '') {
+          return hasMatchingProperties(updateValue.value, removeItem.value);
+        }
+        return isMatchingPathValue(updateValue, removeItem);
+      });
+    });
+
+    const reconstructedValues = reconstructValues(filteredValues, pathToRemove);
+
+    return {
+      ...update,
+      values: reconstructedValues
+    };
+  }
+
+  return update;
+}
+
+function consolidateRootPaths(values: UpdateValue[]): UpdateValue[] {
+  const rootValues = values.filter(v => v.path === '');
+  const otherValues = values.filter(v => v.path !== '');
+
+  if (rootValues.length <= 1) return values;
+
+  const mergedRootValue = rootValues.reduce((acc, curr) => {
+    return { path: '', value: deepMerge(acc.value, curr.value) };
+  }, { path: '', value: {} });
+
+  return [mergedRootValue, ...otherValues];
+}
+
+function deepMerge(target: any, source: any): any {
+  for (const key in source) {
+    if (source[key] instanceof Object && !Array.isArray(source[key])) {
+      target[key] = deepMerge(target[key] || {}, source[key]);
+    } else {
+      target[key] = source[key];
+    }
+  }
+  return target;
+}
+
+function isMatchingPathValue(updateValue: UpdateValue, removeItem: UpdateValue): boolean {
+  if (updateValue.path === removeItem.path) {
+    return true;
+  }
+
+  if (updateValue.path === '') {
+    const nestedPath = getNestedValue(updateValue.value, removeItem.path);
+    return nestedPath !== undefined;
+  }
+
+  if (removeItem.path === '') {
+    const nestedPath = getNestedValue(removeItem.value, updateValue.path);
+    return nestedPath !== undefined;
+  }
+
+  return false;
+}
+
+function hasMatchingProperties(obj: any, pattern: any): boolean {
+  if (typeof pattern !== 'object' || pattern === null) {
+    return isValueMatch(obj, pattern);
+  }
+
+  return Object.keys(pattern).every(key => {
+    if (!(key in obj)) return false;
+    return hasMatchingProperties(obj[key], pattern[key]);
+  });
+}
+
+function isValueMatch(value: any, pattern: any): boolean {
+  if (typeof value === 'string' && typeof pattern === 'string') {
+    return value.toLowerCase() === pattern.toLowerCase();
+  }
+  return value === pattern;
+}
+
+function getNestedValue(obj: any, path: string): any {
+  if (!path) return obj;
+  return path.split('.').reduce((acc, part) => acc?.[part], obj);
+}
+
+function reconstructValues(values: UpdateValue[], pathToRemove: UpdateValue[]): UpdateValue[] {
+  return values.map(updateValue => {
+    if (typeof updateValue.value !== 'object' || updateValue.value === null) {
+      return updateValue;
+    }
+
+    const removePatterns = pathToRemove.filter(removeItem => {
+      if (removeItem.path !== updateValue.path) return false;
+      return typeof removeItem.value === 'object' && removeItem.value !== null;
+    });
+
+    if (removePatterns.length === 0) return updateValue;
+
+    const newValue = deepCloneAndRemove(updateValue.value, removePatterns);
+    return { ...updateValue, value: newValue };
+  });
+}
+
+function deepCloneAndRemove(obj: any, removePatterns: UpdateValue[]): any {
+  const result = Array.isArray(obj) ? [...obj] : { ...obj };
+
+  for (const pattern of removePatterns) {
+    for (const key in pattern.value) {
+      if (key in result) {
+        if (typeof pattern.value[key] === 'object' && pattern.value[key] !== null) {
+          result[key] = deepCloneAndRemove(result[key], [{
+            path: pattern.path,
+            value: pattern.value[key]
+          }]);
+          if (Object.keys(result[key]).length === 0) {
+            delete result[key];
+          }
+        } else if (isValueMatch(result[key], pattern.value[key])) {
+          delete result[key];
+        }
+      }
+    }
+  }
+
+  return result;
+}
+
+//----------------------------------------------------------------
+
+interface PathValuePair {
+  path: string;
+  value: any; // Consider using a more specific type if possible
+}
+
+interface InputData {
+  values: Array<{
+    path: string;
+    value: any; // Consider using a more specific type if possible
+  }>;
+}
+
+export function extractPathValuePairs(data: InputData): PathValuePair[] {
+  const result: PathValuePair[] = [];
+
+  data.values.forEach(item => {
+    if (item.path === "") {
+      // Handle root level properties
+      if (typeof item.value === 'object' && item.value !== null) {
+        Object.entries(item.value).forEach(([key, value]) => {
+          if (typeof value === 'object' && value !== null) {
+            Object.entries(value).forEach(([subKey, subValue]) => {
+              result.push({
+                path: key,
+                value: { [subKey]: subValue }
+              });
+            });
+          } else {
+            result.push({
+              path: "",
+              value: { [key]: value }
+            });
+          }
+        });
+      }
+    } else {
+      // Handle nested paths
+      if (typeof item.value === 'object' && item.value !== null) {
+        Object.entries(item.value).forEach(([key, value]) => {
+          result.push({
+            path: item.path,
+            value: { [key]: value }
+          });
+        });
+      } else {
+        result.push({
+          path: item.path,
+          value: item.value
+        });
+      }
+    }
+  });
+
+  return result;
+}
+
+// Optionally export the interfaces if they need to be used elsewhere
+export type { PathValuePair, InputData };
\ No newline at end of file
diff --git a/src/index.ts b/src/index.ts
index 5ce5a82c..b4c31905 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -70,6 +70,7 @@ import { WithProviderStatistics } from './deltastats'
 import { pipedProviders } from './pipedproviders'
 import { EventsActorId, WithWrappedEmitter, wrapEmitter } from './events'
 import { Zones } from './zones'
+import { filterUpdates, extractPathValuePairs } from './baseDeltaFilter'
 const debug = createDebug('signalk-server')

 import { StreamBundle } from './streambundle'
@@ -273,6 +274,7 @@ class Server {
     }
     app.activateSourcePriorities()

+    let pathsToRemove: any = []
     app.handleMessage = (
       providerId: string,
       data: any,
@@ -302,6 +304,18 @@ class Server {
           if (!update.timestamp || app.config.overrideTimestampWithNow) {
             update.timestamp = now.toISOString() as Timestamp
           }
+          if (data.context === `vessels.${app.selfId}` && 'values' in update) {
+            if (pathsToRemove.length === 0 && update.$source === 'defaults') {
+                pathsToRemove = extractPathValuePairs(update)
+                //console.log('Extracted paths:', pathsToRemove);
+            } else if (pathsToRemove) {
+                data.updates = data.updates.map((update: any) =>
+                    filterUpdates(update, pathsToRemove)
+                ).filter(Boolean);
+                //console.log(JSON.stringify(data.updates, null, 2));
+                return data.updates;
+            }
+          }
         })
         try {
           const preferredDelta = toPreferredDelta(data, now, app.selfContext)
diff --git a/test/baseDeltaFilter.js b/test/baseDeltaFilter.js
new file mode 100644
index 00000000..f3aff587
--- /dev/null
+++ b/test/baseDeltaFilter.js
@@ -0,0 +1,119 @@
+const { expect } = require('chai');
+const { filterUpdates } = require('../dist/baseDeltaFilter.js');
+
+describe('filterUpdates', () => {
+  const pathToRemove = [
+    { path: "", value: { name: "GenericVessel" } },
+    { path: "", value: { mmsi: "123456789" } },
+    { path: "communication", value: { callsignVhf: "GEN123" } },
+    { path: "design.aisShipType", value: { name: "GenericType" } },
+    { path: "design.aisShipType", value: { id: 42 } },
+    { path: "design.draft", value: { maximum: 1.5 } },
+    { path: "design.length", value: { overall: 15 } },
+    { path: "design.beam", value: 5 },
+    { path: "sensors.gps.fromBow", value: 7 },
+    { path: "sensors.gps.fromCenter", value: 1 },
+    { path: "design.airHeight", value: 5 }
+  ];
+
+  describe('basic filtering', () => {
+    it('should remove exact matches at root path', () => {
+      const update = {
+        values: [
+          { path: "", value: { mmsi: "123456789" } },
+          { path: "", value: { name: "genericvessel" } } // case insensitive
+        ]
+      };
+
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(0);
+    });
+
+    it('should remove nested matches in root path', () => {
+      const update = {
+        values: [
+          { path: "", value: { communication: { callsignVhf: "GEN123" } } }
+        ]
+      };
+
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(0);
+    });
+
+    it('should remove specific path matches', () => {
+      const update = {
+        values: [
+          { path: "design.length", value: { overall: 15 } },
+          { path: "design.beam", value: 5 }
+        ]
+      };
+
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(0);
+    });
+  });
+
+  describe('edge cases', () => {
+    it('should handle empty update', () => {
+      const update = { values: [] };
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(0);
+    });
+
+    it('should preserve non-matching values', () => {
+      const update = {
+        values: [
+          { path: "navigation.position", value: { latitude: 60.1, longitude: 22.3 } },
+          { path: "sensors.ais.fromBow", value: 5 }
+        ]
+      };
+
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(2);
+    });
+
+    it('should handle array input', () => {
+      const updates = [
+        { values: [{ path: "", value: { mmsi: "123456789" } }] },
+        { values: [{ path: "design.length", value: { overall: 15 } }] }
+      ];
+
+      const results = filterUpdates(updates, pathToRemove);
+      expect(results).to.have.length(2);
+      expect(results[0].values).to.have.length(0);
+      expect(results[1].values).to.have.length(0);
+    });
+
+    it('should handle case variations in string values', () => {
+      const update = {
+        values: [
+          { path: "", value: { name: "genericvessel" } }, // lowercase
+          { path: "design.aisShipType", value: { name: "GENERICTYPE" } } // uppercase
+        ]
+      };
+
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(0);
+    });
+  });
+
+  describe('real-world scenarios', () => {
+    it('should filter complex update with mixed matches', () => {
+      const update = {
+        values: [
+          { path: "", value: { mmsi: "123456789", name: "GenericVessel" } },
+          { path: "design.length", value: { overall: 15 } },
+          { path: "sensors.ais.fromBow", value: 5 }, // Should keep
+          { path: "", value: { communication: { callsignVhf: "GEN123" } } },
+          { path: "design.aisShipType", value: { id: 42, name: "GenericType" } },
+          { path: "navigation.speed", value: 10 } // Should keep
+        ]
+      };
+
+      const result = filterUpdates(update, pathToRemove);
+      expect(result.values).to.have.length(2);
+      expect(result.values.find(v => v.path === "sensors.ais.fromBow")).to.exist;
+      expect(result.values.find(v => v.path === "navigation.speed")).to.exist;
+    });
+  });
+});
\ No newline at end of file
