From 5c1ebc674fea827d20a6caaadef051c775a3f251 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Wed, 28 May 2025 13:12:56 -0400
Subject: [PATCH 1/5] fix: ignore static self data

---
 src/index.ts | 57 +++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 54 insertions(+), 3 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index 50993ec37..6ac11cd64 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -315,11 +315,13 @@ class Server {
         if (data.updates.length < 1) return

         try {
-          const preferredDelta = toPreferredDelta(data, now, app.selfContext)
+          let delta = filterStaticSelfData(data, app.selfContext)
+          delta = toPreferredDelta(delta, now, app.selfContext)
+
           if (skVersion == SKVersion.v1) {
-            deltachainV1.process(preferredDelta)
+            deltachainV1.process(delta)
           } else {
-            deltachainV2.process(preferredDelta)
+            deltachainV2.process(delta)
           }
         } catch (err) {
           console.error(err)
@@ -673,3 +675,52 @@ async function startInterfaces(
     })
   )
 }
+
+function filterStaticSelfData(delta: any, selfContext: string) {
+  if (delta.context === selfContext) {
+    delta.updates &&
+      delta.updates.forEach((update: any) => {
+        if ('values' in update) {
+          update.values = update.values.reduce((acc: any, pathValue: any) => {
+            const nvp = filterSelfDataKP(pathValue)
+            if (nvp) {
+              acc.push(nvp)
+            }
+            return acc
+          }, [])
+          if (update.values.length == 0) {
+            delete update.values
+          }
+        }
+      })
+  }
+  return delta
+}
+
+function filterSelfDataKP(pathValue: any) {
+  const emptyKeys = ['name', 'mmsi']
+
+  const filteredPaths = [
+    'design.aisShipType',
+    'design.beam',
+    'design.length',
+    'design.draft',
+    'sensors.gps.fromBow',
+    'sensors.gps.fromCenter'
+  ]
+
+  if (pathValue.path === '') {
+    if (Object.keys(pathValue.value).some((k) => emptyKeys.includes(k))) {
+      const value = pathValue.value
+      pathValue.value = {}
+      Object.keys(value).forEach((k) => {
+        if (!emptyKeys.includes(k)) {
+          pathValue.value[k] = value[k]
+        }
+      })
+    }
+  } else if (filteredPaths.includes(pathValue.path)) {
+    return null
+  }
+  return pathValue
+}

From 462c6edfe72c70ab6df51045fdd18a18dded8831 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Wed, 28 May 2025 13:36:03 -0400
Subject: [PATCH 2/5] fix: allow messages from defaults through

---
 src/index.ts       | 2 +-
 test/deltacache.js | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/index.ts b/src/index.ts
index 6ac11cd64..90cf6004c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -680,7 +680,7 @@ function filterStaticSelfData(delta: any, selfContext: string) {
   if (delta.context === selfContext) {
     delta.updates &&
       delta.updates.forEach((update: any) => {
-        if ('values' in update) {
+        if ('values' in update && update['$source'] !== 'defaults') {
           update.values = update.values.reduce((acc: any, pathValue: any) => {
             const nvp = filterSelfDataKP(pathValue)
             if (nvp) {
diff --git a/test/deltacache.js b/test/deltacache.js
index abfe21978..358df64b0 100644
--- a/test/deltacache.js
+++ b/test/deltacache.js
@@ -46,6 +46,7 @@ const testDelta = {
     },
     {
       timestamp: '2014-05-03T09:14:11.096Z',
+      $source: 'defaults',
       values: [
         {
           path: '',

From 89aed7ab5cfcfe96ef9f290b57a9567e13d449d4 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 30 May 2025 12:56:06 -0400
Subject: [PATCH 3/5] fix: ignore communication.callsignVhf

---
 src/index.ts | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index 90cf6004c..d9f5e031c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -698,9 +698,12 @@ function filterStaticSelfData(delta: any, selfContext: string) {
 }

 function filterSelfDataKP(pathValue: any) {
-  const emptyKeys = ['name', 'mmsi']
+  const deepKeys: { [key: string]: string[] } = {
+    '': ['name', 'mmsi'],
+    communication: ['callsignVhf']
+  }

-  const filteredPaths = [
+  const filteredPaths: string[] = [
     'design.aisShipType',
     'design.beam',
     'design.length',
@@ -709,15 +712,20 @@ function filterSelfDataKP(pathValue: any) {
     'sensors.gps.fromCenter'
   ]

-  if (pathValue.path === '') {
-    if (Object.keys(pathValue.value).some((k) => emptyKeys.includes(k))) {
+  const deep = deepKeys[pathValue.path]
+
+  if (deep !== undefined) {
+    if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
       const value = pathValue.value
       pathValue.value = {}
       Object.keys(value).forEach((k) => {
-        if (!emptyKeys.includes(k)) {
+        if (!deep.includes(k)) {
           pathValue.value[k] = value[k]
         }
       })
+      if (Object.keys(pathValue.value).length == 0) {
+        return null
+      }
     }
   } else if (filteredPaths.includes(pathValue.path)) {
     return null

From 40d9a438f0249b01d1dde2c366deef6ae1b80227 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 10:00:11 -0400
Subject: [PATCH 4/5] fix: filter out communication.callsignVhf

---
 src/index.ts | 25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index d9f5e031c..b3c01a5d7 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -699,8 +699,8 @@ function filterStaticSelfData(delta: any, selfContext: string) {

 function filterSelfDataKP(pathValue: any) {
   const deepKeys: { [key: string]: string[] } = {
-    '': ['name', 'mmsi'],
-    communication: ['callsignVhf']
+    '': ['name', 'mmsi', 'communication'],
+    //communication: ['callsignVhf']
   }

   const filteredPaths: string[] = [
@@ -714,15 +714,22 @@ function filterSelfDataKP(pathValue: any) {

   const deep = deepKeys[pathValue.path]

+  const filterValues = (obj: any, items: string[]) => {
+    const res: {[key:string]: any} = {}
+    Object.keys(obj).forEach((k) => {
+      if (!items.includes(k)) {
+        res[k] = obj.value[k]
+      }
+    })
+    return res
+  }
+
   if (deep !== undefined) {
     if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
-      const value = pathValue.value
-      pathValue.value = {}
-      Object.keys(value).forEach((k) => {
-        if (!deep.includes(k)) {
-          pathValue.value[k] = value[k]
-        }
-      })
+      pathValue.value = filterValues(pathValue.value, deep)
+      if ( pathValue.path === '' && pathValue.value.communication !== undefined ) {
+        pathValue.value.communication = filterValues(pathValue.value.communication, ['callsignVhf'])
+      }
       if (Object.keys(pathValue.value).length == 0) {
         return null
       }

From 9e9790efe4ef6a353a458a42069727ec6d3384e6 Mon Sep 17 00:00:00 2001
From: Scott Bender <scott@scottbender.net>
Date: Fri, 6 Jun 2025 11:03:22 -0400
Subject: [PATCH 5/5] fix: formatting

---
 src/index.ts | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index b3c01a5d7..b0f291bc6 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -699,7 +699,7 @@ function filterStaticSelfData(delta: any, selfContext: string) {

 function filterSelfDataKP(pathValue: any) {
   const deepKeys: { [key: string]: string[] } = {
-    '': ['name', 'mmsi', 'communication'],
+    '': ['name', 'mmsi', 'communication']
     //communication: ['callsignVhf']
   }

@@ -715,11 +715,11 @@ function filterSelfDataKP(pathValue: any) {
   const deep = deepKeys[pathValue.path]

   const filterValues = (obj: any, items: string[]) => {
-    const res: {[key:string]: any} = {}
+    const res: { [key: string]: any } = {}
     Object.keys(obj).forEach((k) => {
       if (!items.includes(k)) {
         res[k] = obj.value[k]
-      }
+      }
     })
     return res
   }
@@ -727,8 +727,14 @@ function filterSelfDataKP(pathValue: any) {
   if (deep !== undefined) {
     if (Object.keys(pathValue.value).some((k) => deep.includes(k))) {
       pathValue.value = filterValues(pathValue.value, deep)
-      if ( pathValue.path === '' && pathValue.value.communication !== undefined ) {
-        pathValue.value.communication = filterValues(pathValue.value.communication, ['callsignVhf'])
+      if (
+        pathValue.path === '' &&
+        pathValue.value.communication !== undefined
+      ) {
+        pathValue.value.communication = filterValues(
+          pathValue.value.communication,
+          ['callsignVhf']
+        )
       }
       if (Object.keys(pathValue.value).length == 0) {
         return null

